#Code for Nonlinear Dimension Estimation for Cryptocurrency Data
# Variables and Libraries -----------------------------------------------------
#Load the Libraries and Variables need for the code to function
library(lubridate)
library(MASS)
library(paran)
library(moments)
library(corrplot)
library(rpca)
library(readxl)
CD <- read_xlsx("APIData_Updated_SET_LOGReturns.xlsx") #Load data set
CR <- as.data.frame(CD)[-1] #Isolate returns
col_num = ncol(CR)
row_num = nrow(CR)
win_size = 64 #Set window size
expanding = TRUE #This value toggles between Expanding and Rolling Window
# Data Summary ------------------------------------------------------------
#Provides a general summary of the entire data set
data_summary <- apply(CR, 2, summary)
data_summary <- rbind(data_summary, apply(CR,2,sd), apply(CR,2,skewness), apply(CR,2,kurtosis))
rownames(data_summary)[7:9] <- c("Std. Dev.", "Skew", "Kurt")
for (i in 1:col_num){
asset_name = colnames(CR)[i]
asset_ts <- ts(CR[asset_name], start = decimal_date(as.Date("2020-08-18")), frequency = 365.25)
layout(matrix(c(1,1,2,3), nrow=2, byrow=TRUE))
plot(asset_ts, xlab = "Date", ylab = asset_name, main = paste(asset_name,"Returns"))
boxplot(CR[asset_name], horizontal = TRUE, main = asset_name, xlab = "Returns")
acf(CR[asset_name], lag.max = 40)
}
# Preliminary PCA ---------------------------------------------------------
#PCA
pca_CR <- prcomp(CR)
var_exp_CR <- pca_CR$sdev^2 / sum(pca_CR$sdev^2)
plot((1:length(var_exp_CR)), var_exp_CR, "l",main = "Scree Plot of Returns",
xlab = "Principal Components", ylab = "Variance Explained")
#Dimension Estimation
dim_est_CR <- matrix(ncol = 5, nrow = 1)
dim_est_CR[1] <- length(which(pca_CR$sdev > mean(pca_CR$sdev))) #Kaiser Rule
dim_est_CR[2] <- 1+length(which(cumsum(var_exp_CR)<=.85)) #Variance Explained
dim_est_CR[3] <- which.max(pca_CR$sdev[2:col_num] / pca_CR$sdev[1:col_num-1]) #Ratio Rule
dim_est_CR[4] <- paran(CR)$Retained #Horn's Parallel Analysis
dim_est_CR[5] <- mean(dim_est_CR[1:4])
#Dimension Estimation Plot
colnames(dim_est_CR) <- c("Kaiser", "Var. Exp.", "Ratio", "Horn's", "Average")
barplot(dim_est_CR, col = "skyblue2", xlab = "Method", ylab = "PC's Retained",
main = "Number of PC's Retained")
#Loadings Plot
par(mar=c(5, 4, 4, 5), xpd=TRUE)
barplot(pca_CR$rotation^2, main = "PCA Loadings", col = c(1:13))
legend(x = "topright", inset = c(-0.1,0), legend = colnames(CR), col = c(1:13), pch = 15)
# Preliminary RPCA --------------------------------------------------------
#RPCA
rpca_CR <- rpca(as.matrix(CR))
var_exp_CR2 <- rpca_CR$L.svd$d^2 / sum(rpca_CR$L.svd$d^2)
plot((1:length(var_exp_CR2)), var_exp_CR2, "l",main = "Scree Plot of Returns",
xlab = "Principal Components", ylab = "Variance Explained")
#Dimension Estimation
dim_est_CR2 <- matrix(ncol = 5, nrow = 1)
dim_est_CR2[1] <- length(which(rpca_CR$L.svd$d > mean(rpca_CR$L.svd$d))) #Kaiser Rule
dim_est_CR2[2] <- 1+length(which(cumsum(var_exp_CR2)<=.85)) #Variance Explained
dim_est_CR2[3] <- which.max(rpca_CR$L.svd$d[2:6] / rpca_CR$L.svd$d[1:6-1]) #Ratio Rule
dim_est_CR2[4] <- paran(x = rpca_CR$L)$Retained #Horn's Parallel Analysis
dim_est_CR2[5] <- mean(dim_est_CR2[1:4])
#Dimension Estimation Plot
colnames(dim_est_CR2) <- c("Kaiser", "Var. Exp.", "Ratio", "Horn's", "Average")
barplot(dim_est_CR2, col = "lightpink2", xlab = "Method", ylab = "PC's Retained",
main = "Number of PC's Retained")
#Loadings Plot
loadrpca <- t(rpca_CR$L.svd$vt)
colnames(loadrpca) <- sprintf("PC%d",seq(1:6))
par(mar=c(5, 4, 4, 5), xpd=TRUE)
barplot(loadrpca^2, main = "RPCA Loadings", col = c(1:13))
legend(x = "topright", inset = c(-0.1,0), legend = colnames(CR), col = c(1:13), pch = 15)
# WS Asset Analysis ------------------------------------------------------
#Creates Plots and Data Frames for analysis with EWS
for (i in 1:col_num){
SumStat <- matrix(nrow = (row_num - win_size),ncol = 4)
for (j in 1:(row_num - win_size)) {
if (expanding == TRUE){
j_0 = win_size
main_title = "EWS Summary"
} else {
j_0 = j
main_title = paste("RWS Summary with Window", win_size)
}
temp_set <- CR[j_0:(j + win_size), i]
SumStat[j,1]<-mean(temp_set)
SumStat[j,2]<-sd(temp_set)
SumStat[j,3]<-skewness(temp_set)
SumStat[j,4]<-kurtosis(temp_set)
}
dates <- seq(as.Date("2020-08-18"), by = "day", length.out = (row_num-win_size))
SumStat <- data.frame(dates, SumStat)
58
colnames(SumStat) <- c("Dates", "Mean", "Std. Dev.", "Skew", "Kurt")
par(mfrow=c(2,2))
plot(SumStat$Dates, SumStat$Mean, 'l', xlab = "Dates", ylab = "Mean")
plot(SumStat$Dates, SumStat$`Std. Dev.`, 'l', xlab = "Dates", ylab = "Std. Dev")
plot(SumStat$Dates, SumStat$Skew, 'l', xlab = "Dates", ylab = "Skew")
plot(SumStat$Dates, SumStat$Kurt, 'l', xlab = "Dates", ylab = "Kurtosis")
mtext(paste(colnames(CR)[i],main_title), side = 3, line = -19, outer = TRUE)
}
rm("i", "j", "j_0", "main_title", "temp_set", "SumStat", "dates")
# WS PCA -----------------------------------------------------------------
pca_WS <- matrix(nrow = (row_num - win_size), ncol = 13*3)
loading_1 <- matrix(nrow = (row_num - win_size), ncol = 13)
loading_2 <- matrix(nrow = (row_num - win_size), ncol = 13)
loading_3 <- matrix(nrow = (row_num - win_size), ncol = 13)
loading_4 <- matrix(nrow = (row_num - win_size), ncol = 13)
error <- matrix(nrow = (row_num - win_size), ncol = 1)
for (i in 1:(row_num - win_size)){
if (expanding == TRUE){
i_0 = 1
} else {
i_0 = i
}
temp_pca <- prcomp(CR[i_0:(win_size + i),])
recon <- temp_pca$x[,1:4] %*% t(temp_pca$rotation[,1:4])
error[i,1] <- (1/sqrt(win_size + i))*norm(as.matrix(CR)[1:(64+i),] - recon, "f")
for(j in 1:col_num){
pca_WS[i,j] <- temp_pca$sdev[j]
pca_WS[i,(j + col_num)] <- (temp_pca$sdev[j])^2
}
pca_WS[i,14:26] <- pca_WS[i,14:26] / sum(pca_WS[i,14:26])
loading_1[i,] <- as.matrix(t(temp_pca$rotation[,1]))
loading_2[i,] <- as.matrix(t(temp_pca$rotation[,2]))
loading_3[i,] <- as.matrix(t(temp_pca$rotation[,3]))
loading_4[i,] <- as.matrix(t(temp_pca$rotation[,4]))
}
#Dimension Estimation
dim_est_pca <- matrix(nrow = nrow(pca_WS), ncol = 4)
for (i in 1:(nrow(pca_WS))){
dim_est_pca[i,1] <- length(which(pca_WS[i,1:13] > mean(pca_WS[i,1:13])))#Kaiser Rule
dim_est_pca[i,2] <- 1+length(which(cumsum(pca_WS[i,14:26])<.8)) #Variance Explained
dim_est_pca[i,3] <- which.max(pca_WS[i,2:13] / pca_WS[i,1:12]) #Ratio Rule
dim_est_pca[i,4] <- mean(dim_est_pca[i,1:3]) #Average Dimension
}
#Loadings Plots
par(mfrow = c(2,2))
matplot(loading_1^2, ylab = "", type = "l", col = 1:13, main = "PCA Loading 1")
matplot(loading_2^2, ylab = "",type = "l", col = 1:13, main = "PCA Loading 2")
matplot(loading_3^2, ylab = "",type = "l", col = 1:13, main = "PCA Loading 3")
matplot(loading_4^2, ylab = "",type = "l", col = 1:13, main = "PCA Loading 4")
legend("topright", legend = colnames(CR), col=1:13, pch=1)
#Dimension Estimation Plots
par(mfrow = c(2,2))
plot.ts(dim_est_pca[,1], ylab = "PC's Retained", main = "Kaiser's Rule")
plot.ts(dim_est_pca[,2], ylab = "", main = "Variance Explained" )
plot.ts(dim_est_pca[,3], ylab = "PC's Retained", main = "Ratio Rule")
plot.ts(dim_est_pca[,4], ylab = "", main = "Average")
rm("i", "i_0", "j")
# WS RPCA ----------------------------------------------------------------
rpca_WS <- matrix(nrow = (row_num - win_size), ncol = 13*2)
loading_1 <- matrix(nrow = (row_num - win_size), ncol = 13)
loading_2 <- matrix(nrow = (row_num - win_size), ncol = 13)
errorrpca <- matrix(nrow = (row_num - win_size), ncol = 1)
for (i in 1:(row_num - win_size)){
if (expanding == TRUE){
i_0 = 1
} else {
i_0 = i
}
temp_rpca <- rpca(as.matrix(CR[i_0:(win_size + i),]))
for(j in 1:7){
rpca_WS[i,j] <- temp_rpca$L.svd$d[j]
rpca_WS[i,j+7] <- (temp_rpca$L.svd$d[j])^2
}
rpca_WS[i,8:14] <- rpca_WS[i,8:14] / sum(rpca_WS[i,8:14])
errorrpca[i,1] <- norm(temp_rpca$S, "F")
loading_1[i,] <- abs(temp_rpca$L.svd$vt[1,])
loading_2[i,] <- abs(temp_rpca$L.svd$vt[2,])
60
}
#Dimension Estimation
dim_est_rpca <- matrix(nrow = nrow(rpca_WS), ncol = 4)
for (i in 1:(nrow(rpca_WS))){
dim_est_rpca[i,1] <- length(which(rpca_WS[i,1:7] > mean(rpca_WS[i,1:7]))) #Kaiser Rule
dim_est_rpca[i,2] <- 1+length(which(cumsum(rpca_WS[i,8:14])<=.85)) #Variance Explained
dim_est_rpca[i,3] <- which.max(rpca_WS[i,2:7] / rpca_WS[i,1:6]) #Ratio Rule
dim_est_rpca[i,4] <- mean(dim_est_rpca[i,1:3]) #Average Dimension
}
#Loadings Plots
par(mfrow = c(2,1))
matplot(loading_1, ylab = "", type = "l", col = 1:13, main = "RPCA Loading 1")
matplot(loading_2, ylab = "",type = "l", col = 1:13, main = "RPCA Loading 2")
#Dimension Estimation Plots
par(mfrow = c(2,2))
plot(dim_est_rpca[,1], type = "l", ylab = "PC's Retained", main = "Kaiser's Rule")
plot(dim_est_rpca[,2], type = "l",ylab = "", main = "Variance Explained" )
plot(dim_est_rpca[,3], type = "l",ylab = "PC's Retained", main = "Ratio Rule")
plot(dim_est_rpca[,4], type = "l",ylab = "", main = "Average")
rm("i", "i_0", "j")
